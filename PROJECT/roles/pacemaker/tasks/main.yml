---
# tasks file for pacemaker


- name: Install pacemaker
  yum:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
    - pacemaker 
    - pcs 
    - psmisc 
    - policycoreutils-python

- name: Create user hacluster
  user:
    name: hacluster

- name: Create password hacluster-user
  user:
    name: hacluster
    password: "{{ 'hacluster' | password_hash('sha512') }}"

- name: Enable&Start pcsd
  systemd:
    name: pcsd
    state: started
    enabled: yes

- name: Auth node cluster 
  command: "{{ item }}"
  with_items:
    - " pcs cluster auth {{ node1 }} {{ node2 }} {{ node3 }} -u hacluster -p {{ pcm_password }}"
  when: inventory_hostname == "n1.brs"

- name: Create cluster 
  command: "{{ item }}"
  with_items:
    - "pcs cluster setup --name {{ cl_name }} {{ node1 }} {{ node2 }} {{ node3 }} --force"
  when: inventory_hostname == "n1.brs"

- name: Start&Enable cluster
  command: "{{ item }}"
  with_items:
    - "pcs cluster enable --all"
    - "pcs cluster start --all"
  when: inventory_hostname == "n1.brs"

- name: Install components for building
  yum:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
    - git
    - autoconf
    - automake
    - libtool
    - gcc
    - pexpect

- name: Clean old build directory (/root/fence-agents)
  file:
    path: /root/fence-agents
    state: absent
    force: yes

- name: Clone fence-agents from git to /root/fence-agents
  git:
    repo: 'https://github.com/ClusterLabs/fence-agents.git'
    dest: /root/fence-agents/
    clone: yes

- name: Run pre-build scripts from /root/fence-agents
  command: "{{ item }}"
  args:
    chdir: /root/fence-agents/
  with_items:
    - "/root/fence-agents/autogen.sh"
    - "/root/fence-agents/configure"

- name: Build fence-agents
  make:
    chdir: /root/fence-agents/

- name: Install fence-agents
  make:
    chdir: /root/fence-agents/
    target: install

- name: Set replay protection (/opt/pcs_fence_install_done)
  file:
    path: /opt/pcs_fence_install_done
    state: touch
    owner: root
    group: root
    mode: '0744'

- name: Configure fencing on kvm
  command: "{{ item }}"
  with_items:
    - "pcs stonith create pcm1_fence_dev fence_pve ipaddr=\"{{ kvm_ip }}\" inet4_only=\"true\" node_name=\"{{ kvm_node_name }}\" login=\"{{ KVM_login }}\" passwd=\"{{ KVM_password }}\" power_wait=\"15\" port=\"{{ pcm1_vm_nodeid }}\" vmtype=\"qemu\" pcmk_host_list=\"{{ node1 }}\""
    - "pcs stonith create pcm2_fence_dev fence_pve ipaddr=\"{{ kvm_ip }}\" inet4_only=\"true\" node_name=\"{{ kvm_node_name }}\" login=\"{{ KVM_login }}\" passwd=\"{{ KVM_password }}\" power_wait=\"15\" port=\"{{ pcm2_vm_nodeid }}\" vmtype=\"qemu\" pcmk_host_list=\"{{ node2 }}\""
    - "pcs stonith create pcm3_fence_dev fence_pve ipaddr=\"{{ kvm_ip }}\" inet4_only=\"true\" node_name=\"{{ kvm_node_name }}\" login=\"{{ KVM_login }}\" passwd=\"{{ KVM_password }}\" power_wait=\"15\" port=\"{{ pcm3_vm_nodeid }}\" vmtype=\"qemu\" pcmk_host_list=\"{{ node3 }}\""
    - "pcs constraint location pcm1_fence_dev avoids {{ node1 }}"
    - "pcs constraint location pcm2_fence_dev avoids {{ node2 }}"
    - "pcs constraint location pcm3_fence_dev avoids {{ node3 }}"
  when: inventory_hostname == "n1.brs"

- name: Create cluster resource
  command: "{{ item }}"
  with_items:
    - "pcs resource create {{ name_vip }}  ocf:heartbeat:IPaddr2 ip=\"{{ vip }}\" mac=\"01:00:5E:02:02:04\" cidr_netmask=\"24\" nic=\"eth0\" clusterip_hash=\"sourceip-sourceport\" op monitor interval=10s clone clone-max=3 clone-node-max=1 on-fail=fence"
    - "pcs resource create {{ name_web }} ocf:heartbeat:nginx configfile=/etc/nginx/nginx.conf op monitor timeout=5s interval=5s clone clone-max=3 clone-node-max=1 on-fail=fence" 
    - "pcs constraint colocation add {{ name_web }}-clone {{ name_vip }}-clone INFINITY" 
    - "pcs constraint order {{ name_vip }}-clone then {{ name_web }}-clone"
    - "pcs resource create {{ name_dlm }} ocf:pacemaker:controld op monitor interval=60s clone clone-max=3 clone-node-max=1"
    - "mount {{ block_device }}1 {{ web_dir }}"
    - "pcs resource create {{ name_gfs2 }} ocf:heartbeat:Filesystem device=\"/dev/sdb1\"  directory=\"{{ web_dir }}\" fstype=\"gfs2\" options=\"noatime,nodiratime,rw\" op monitor interval=90s on-fail=fence clone clone-max=3 clone-node-max=1 on-fail=fence"
    - "pcs constraint colocation add {{ name_gfs2 }}-clone with {{ name_dlm }}-clone INFINITY"
    - "pcs constraint order {{ name_dlm }}-clone then {{ name_gfs2 }}-clone"
  when: inventory_hostname == "n1.brs"
